* Python 2 and 3 compatibility ... the easy way
* Why? :
  - 2to3 is okay, but fails in a few annoying ways
  - I'd rather have a single codebase because I'm lazy (this is Good Thing)
* Firstly give up on compatibility with anything before Python 2.6
* Why? :
  - You get to use from __future__ imports to make the Python 2 syntax *almost* equal to Python 3
  - Everything that's left (at least that I've encountered) has been import renames and string type testing (okay, and the lack of packages on Python 3 ... still!)
* So, once you've added a full complement of from __future__ imports to all your scripts what's next? :
  - Replace all u'' with ''
  - Get rid of any relative imports (why were you using these the first place?!)
  - Check any division operators (a quick grep's probably sufficient for this)
  - Stuff a parentheses around all your print statements (again a sed -ie is probably sufficient for 90% of this)
* Test test test test
* Update your setup.py to list Python 2 and 3 in classifers (Trove stuff)
* Update your debian package (what do you mean you don't have one?!) to support
  Python 2 or 3 packages (but probably default to 2 at least until 12.10
  arrives - is that still going for Py3 by default?)
* Release
* Profit!
